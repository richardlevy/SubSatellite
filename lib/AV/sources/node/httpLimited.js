// Generated by CoffeeScript 1.8.0
(function() {
  var AVBuffer, HTTPLimitedSource, HTTPSource, http, rateLimit,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HTTPSource = require('./http');

  http = require('http');

  AVBuffer = require('../../core/buffer');

  rateLimit = require('rateLimit');

  HTTPLimitedSource = (function(_super) {
    __extends(HTTPLimitedSource, _super);

    function HTTPLimitedSource(url, limit) {
      this.url = url;
      this.limit = limit;
      HTTPLimitedSource.__super__.constructor.call(this, this.url);
    }

    HTTPLimitedSource.prototype.start = function() {
      if (this.response != null) {
        return this.response.resume();
      }
      this.request = http.get(this.url);
      this.request.on('response', (function(_this) {
        return function(response) {
          _this.response = response;
          if (_this.response.statusCode !== 200) {
            return _this.errorHandler('Error loading file. HTTP status code ' + _this.response.statusCode);
          }
          rateLimit(_this.response, _this.limit);
          _this.size = parseInt(_this.response.headers['content-length']);
          _this.loaded = 0;
          _this.response.on('data', function(chunk) {
            _this.loaded += chunk.length;
            _this.emit('progress', _this.loaded / _this.size * 100);
            return _this.emit('data', new AVBuffer(new Uint8Array(chunk)));
          });
          _this.response.on('end', function() {
            return _this.emit('end');
          });
          return _this.response.on('error', _this.errorHandler);
        };
      })(this));
      return this.request.on('error', this.errorHandler);
    };

    return HTTPLimitedSource;

  })(HTTPSource);

  module.exports = HTTPLimitedSource;

}).call(this);
