// Generated by CoffeeScript 1.7.1
(function() {
  var AVBuffer, EventEmitter, HTTPSource,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('../../core/events');

  AVBuffer = require('../../core/buffer');

  HTTPSource = (function(_super) {
    __extends(HTTPSource, _super);

    function HTTPSource(url) {
      this.url = url;
      this.chunkSize = 1 << 20;
      this.inflight = false;
      this.reset();
    }

    HTTPSource.prototype.start = function() {
      if (this.length) {
        if (!this.inflight) {
          return this.loop();
        }
      }
      this.inflight = true;
      this.xhr = new XMLHttpRequest();
      this.xhr.onload = (function(_this) {
        return function(event) {
          _this.length = parseInt(_this.xhr.getResponseHeader("Content-Length"));
          _this.inflight = false;
          return _this.loop();
        };
      })(this);
      this.xhr.onerror = (function(_this) {
        return function(err) {
          _this.pause();
          return _this.emit('error', err);
        };
      })(this);
      this.xhr.onabort = (function(_this) {
        return function(event) {
          return _this.inflight = false;
        };
      })(this);
      this.xhr.open("HEAD", this.url, true);
      return this.xhr.send(null);
    };

    HTTPSource.prototype.loop = function() {
      var endPos;
      if (this.inflight || !this.length) {
        return this.emit('error', 'Something is wrong in HTTPSource.loop');
      }
      this.inflight = true;
      this.xhr = new XMLHttpRequest();
      this.xhr.onload = (function(_this) {
        return function(event) {
          var buf, buffer, i, txt, _i, _ref;
          if (_this.xhr.response) {
            buf = new Uint8Array(_this.xhr.response);
          } else {
            txt = _this.xhr.responseText;
            buf = new Uint8Array(txt.length);
            for (i = _i = 0, _ref = txt.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              buf[i] = txt.charCodeAt(i) & 0xff;
            }
          }
          buffer = new AVBuffer(buf);
          _this.offset += buffer.length;
          _this.emit('data', buffer);
          if (_this.offset >= _this.length) {
            _this.emit('end');
          }
          _this.inflight = false;
          if (!(_this.offset >= _this.length)) {
            return _this.loop();
          }
        };
      })(this);
      this.xhr.onprogress = (function(_this) {
        return function(event) {
          return _this.emit('progress', (_this.offset + event.loaded) / _this.length * 100);
        };
      })(this);
      this.xhr.onerror = (function(_this) {
        return function(err) {
          _this.emit('error', err);
          return _this.pause();
        };
      })(this);
      this.xhr.onabort = (function(_this) {
        return function(event) {
          return _this.inflight = false;
        };
      })(this);
      this.xhr.open("GET", this.url, true);
      this.xhr.responseType = "arraybuffer";
      endPos = Math.min(this.offset + this.chunkSize, this.length);
      this.xhr.setRequestHeader("Range", "bytes=" + this.offset + "-" + endPos);
      this.xhr.overrideMimeType('text/plain; charset=x-user-defined');
      return this.xhr.send(null);
    };

    HTTPSource.prototype.pause = function() {
      var _ref;
      this.inflight = false;
      return (_ref = this.xhr) != null ? _ref.abort() : void 0;
    };

    HTTPSource.prototype.reset = function() {
      this.pause();
      return this.offset = 0;
    };

    return HTTPSource;

  })(EventEmitter);

  module.exports = HTTPSource;

}).call(this);
